<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.java.TrainningJV.mappers.mapperCustom.UserMapperCustom">
    <resultMap id="userResultMap" type="com.java.TrainningJV.models.User">
        <id property="id" column="user_id"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="user_email"/>
        <result property="dateOfBirth" column="date_of_birth"/>
        <result property="gender" column="gender"/>
        <result property="address" column="user_address"/>
        <result property="roleId" column="role_id"/> 
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="phone" column="phone"/>
        <result property="password" column="password"/>

        <collection property="orders" ofType="com.java.TrainningJV.models.Order">
            <id property="id" column="order_id"/>
            <result property="userId" column="user_order_id"/>
            <result property="fullName" column="fullname"/>
            <result property="address" column="order_address"/>
            <result property="email" column="order_email"/>
            <result property="phone" column="order_phone"/>
            <result property="totalMoney" column="total_money"/>
            <result property="orderDate" column="order_date"/>
            <result property="status" column="status"/>
        </collection>    
    </resultMap>

    <select id="findByEmail" parameterType="String" resultMap="userResultMap" >
        SELECT id, first_name, last_name, email, password, date_of_birth, gender, address, phone, role_id, created_at, updated_at
        FROM users
        WHERE email = #{email}
    </select>

    <select id="getUserNoneRole" resultMap="userResultMap">
        SELECT u.id, u.first_name, u.last_name, u.email, u.date_of_birth, u.gender, u.address AS user_address, u.phone, u.role_id, u.created_at, u.updated_at
        FROM users u
        LEFT JOIN roles r ON u.role_id = r.id
        WHERE r.id IS NULL
    </select>

    <select id="getUserRole" resultMap="userResultMap">
        SELECT u.id AS user_id, u.first_name, u.last_name, u.email AS user_email, u.date_of_birth, u.gender, u.address AS user_address, u.password,  u.phone, u.role_id, u.created_at, u.updated_at
        FROM users u
        WHERE u.role_id = #{roleId}
    </select>

    <select id="countUserRole" resultType="com.java.TrainningJV.dtos.response.RoleCountResponse" >
        SELECT r.id AS roleId, r.name AS roleName, COUNT(u.id) AS userCount
        FROM roles r
        LEFT JOIN users u ON u.role_id = r.id
        GROUP BY r.id, r.name
        ORDER BY r.id;
    </select>

    <!-- count user -->
    <select id="countTotalUsers" resultType="int">
    SELECT COUNT(*) FROM users
    </select>



    <!-- get user with order by id -->
    <select id="getUserWithOrders" parameterType="Integer" resultMap="userResultMap">
        SELECT 
            u.id AS user_id,
            u.first_name, u.last_name, u.email AS user_email, u.date_of_birth, u.gender, u.address AS user_address, u.phone, u.role_id, u.password ,u.created_at, u.updated_at,
            o.id AS order_id , o.user_id AS user_order_id, o.fullname, o.address AS order_address, o.total_money, o.order_date, o.status
        FROM users u
        LEFT JOIN orders o ON u.id = o.user_id
        WHERE u.id = #{id}
    </select>

     <resultMap id="userWithOrderResultMap" type="com.java.TrainningJV.dtos.response.UserWithOrderResponse">
        <id property="userId" column="user_id"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="address" column="address"/>
        <result property="roleId" column="role_id"/>
        
        <collection property="orders" ofType="com.java.TrainningJV.dtos.response.OrderResponseToUser">
            <id property="orderId" column="order_id"/>
            <result property="totalMoney" column="total_money"/>
            <result property="orderDate" column="order_date"/>
        </collection>
    </resultMap>

    <select id="getUsersWithOrders" resultMap="userWithOrderResultMap">
        SELECT 
            u.id AS user_id,
            u.first_name,
            u.last_name,
            u.email,
            u.phone,
            u.address,
            u.role_id,
            o.id AS order_id,
            o.total_money,
            o.order_date
        FROM users u
        LEFT JOIN orders o ON u.id = o.user_id
        ORDER BY u.id, o.id
    </select> 

    <resultMap id="userPage" type="com.java.TrainningJV.models.User">
        <id property="id" column="user_id"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="user_email"/>
        <result property="dateOfBirth" column="date_of_birth"/>
        <result property="gender" column="gender"/>
        <result property="address" column="user_address"/>
        <result property="roleId" column="role_id"/> 
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="phone" column="phone"/>
        <result property="password" column="password"/>
    </resultMap>

    <select id="getAllUsers" resultMap="userPage">
    SELECT 
        u.id AS user_id,
        u.first_name,
        u.last_name,
        u.email AS user_email,
        u.date_of_birth,
        u.gender,
        u.address AS user_address,
        u.role_id,
        u.created_at,
        u.updated_at,
        u.phone,
        u.password
    FROM users u
    LIMIT #{size} OFFSET #{offset}
    </select>

</mapper>
