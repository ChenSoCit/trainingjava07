<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.java.TrainningJV.mappers.UserMapper">
    <resultMap id="userResultMap" type="com.java.TrainningJV.models.User">
        <id property="id" column="id"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="email" column="email"/>
        <result property="dateOfBirth" column="date_of_birth"/>
        <result property="gender" column="gender"/>
        <result property="address" column="address"/>
        <result property="roleId" column="role_id"/> 
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="phoneNumber" column="phone"/>
    </resultMap>

    <select id="getUserById" parameterType="long" resultMap="userResultMap">
        SELECT id, first_name, last_name, email, password, date_of_birth, gender, address, phone, role_id, created_at, updated_at
        FROM users
        WHERE id = #{id}
    </select>

    <select id="findByEmail" parameterType="String" resultMap="userResultMap" >
        SELECT id, first_name, last_name, email, password, date_of_birth, gender, address, phone, role_id, created_at, updated_at
        FROM users
        WHERE email = #{email}
    </select>

    <select id="getUserNoneRole" resultMap="userResultMap">
        SELECT u.id, u.first_name, u.last_name, u.email, u.date_of_birth, u.gender, u.address, u.phone, u.role_id, u.created_at, u.updated_at
        FROM users u
        LEFT JOIN roles r ON u.role_id = r.id
        WHERE r.id IS NULL
    </select>

    <select id="getUserRole" resultMap="userResultMap">
        SELECT u.id, u.first_name, u.last_name, u.email, u.date_of_birth, u.gender, u.address, u.phone, u.role_id, u.created_at, u.updated_at
        FROM users u
        WHERE u.role_id = #{roleId}
    </select>

    <select id="countUserRole" resultType="com.java.TrainningJV.dtos.response.RoleCountResponse" >
        SELECT r.id AS roleId, r.name AS roleName, COUNT(u.id) AS userCount
        FROM roles r
        LEFT JOIN users u ON u.role_id = r.id
        GROUP BY r.id, r.name
        ORDER BY r.id;
    </select>

    <insert id="createUser" parameterType="com.java.TrainningJV.models.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (first_name, last_name, email, password, date_of_birth, gender, phone, address, role_id)
        VALUES (#{firstName}, #{lastName}, #{email}, #{password}, #{dateOfBirth}, #{gender}, #{phoneNumber}, #{address}, #{roleId})
    </insert>

    <update id="updateUser" parameterType="com.java.TrainningJV.models.User">
        UPDATE users
        SET first_name = #{firstName},
            last_name = #{lastName},
            email = #{email},
            password = #{password},
            date_of_birth = #{dateOfBirth},
            gender = #{gender},
            address = #{address}
        WHERE id = #{id}
    </update>

    <delete id="deleteUser" parameterType="long">
        DELETE FROM users
        WHERE id = #{id}
    </delete>
</mapper>
